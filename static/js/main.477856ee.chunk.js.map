{"version":3,"sources":["effects/useFetchJobs.js","components/job.component.jsx","components/job-pagination.component.jsx","components/search-form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["ActionTypes","INITIAL_STATE","jobs","isLoading","error","undefined","hasNextPage","reducer","state","action","type","payload","useFetchJobs","parameters","page","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","source","cancelToken2","get","cancelToken","token","params","markdown","then","res","data","catch","e","isCancel","response","length","cancel","Job","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","how_to_apply","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","setPage","goToPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","onParamChange","Form","Row","Col","xs","sm","Label","Control","name","value","onChange","Check","full_time","id","label","App","setParams","Container","target","param","checked","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.477856ee.chunk.js","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst ActionTypes={\n    FETCH_START:'FETCH_START',\n    FETCH_SUCCESS:'FETCH_SUCCESS',\n    FETCH_ERROR:'FETCH_ERROR',\n    HAS_NEXT_PAGE:'HAS_NEXT_PAGE'\n}\n\nconst INITIAL_STATE = { jobs: [], isLoading: true, error: undefined,hasNextPage: false };\n\nconst reducer = (state,action)=>{\n    switch (action.type) {\n        case ActionTypes.FETCH_START:\n            return INITIAL_STATE;\n        case ActionTypes.FETCH_SUCCESS:\n            return {\n                ...state,\n                jobs: action.payload,\n                isLoading: false,\n                error: undefined\n            }\n        case ActionTypes.FETCH_ERROR:\n            return{\n                ...state,\n                error: action.payload,\n                isLoading: false,\n                jobs:[]\n            }\n        case ActionTypes.HAS_NEXT_PAGE:\n            return{\n                ...state,\n                hasNextPage: action.payload\n            }\n        default:\n            return state;\n    }\n}\nconst BASE_URL = \"/positions.json\";\n\nconst useFetchJobs= (parameters,page)=>{\n\n    const [state,dispatch]= useReducer(reducer,INITIAL_STATE);\n    useEffect(()=>{\n        const cancelToken1 = axios.CancelToken.source();  // used to cancel axios request\n        const cancelToken2 = axios.CancelToken.source();\n\n        dispatch({ type: ActionTypes.FETCH_START });\n        axios\n            .get(BASE_URL, {\n                cancelToken: cancelToken1.token,   \n                params: { markdown: true, page: page-1, ...parameters },  // page in API starts at 0\n            })\n            .then((res) => {\n                dispatch({\n                    type: ActionTypes.FETCH_SUCCESS,\n                    payload: res.data ,\n                });\n            })\n            .catch((e) => {\n                if (axios.isCancel(e)) return;   // if we ourselves canceled the req, then it is not actually an error \n                dispatch({ type: ActionTypes.FETCH_ERROR, payload: e.response.data});\n            });\n            // make request for next page and if result length not 0 that means next page exists\n        axios\n            .get(BASE_URL, {\n                cancelToken: cancelToken2.token,   \n                params: { markdown: true, page: page, ...parameters },\n            })\n            .then((res) => {\n                dispatch({\n                    type: ActionTypes.HAS_NEXT_PAGE,\n                    payload: res.data.length!==0 ,\n                });\n            })\n            .catch((e) => {\n                if (axios.isCancel(e)) return;   // if we ourselves canceled the req, then it is not actually an error \n                dispatch({ type: ActionTypes.FETCH_ERROR, payload: e.response.data});\n            });\n            return () => {\n                // before next useEffect fires, cancel previous axios request if still ongoing..basically as we type in search box, for each char typed,\n                // FETCH_START is dispatched, so we don't want previous axios req to fire as we type more chars\n                cancelToken1.cancel();  \n                cancelToken2.cancel();  \n            };\n\n    },[parameters,page]);\n    \n    return state;\n}\n\nexport default useFetchJobs;","import React, { useState } from \"react\";\nimport { Card, Badge, Button, Collapse } from \"react-bootstrap\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Job = ({ job }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <div>\n            <Card className=\"mb-3\">\n                <Card.Body>\n                    <div className=\"d-flex justify-content-between\">\n                        <div>\n                            <Card.Title>\n                                {job.title}-{\" \"}\n                                <span className=\"text-muted font-weight-light\">\n                                    {job.company}\n                                </span>\n                            </Card.Title>\n                            <Card.Subtitle className=\"text-muted mb-2\">\n                                {new Date(job.created_at).toLocaleDateString()}\n                            </Card.Subtitle>\n                            <Badge variant=\"primary\" className=\"mr-2\">\n                                {job.type}\n                            </Badge>\n                            <Badge variant=\"dark\">{job.location}</Badge>\n                            <div style={{ wordBreak: \"break-all\" }}>\n                                <ReactMarkdown source={job.how_to_apply} />\n                            </div>\n                        </div>\n                        <img\n                            className=\"d-none d-md-block\"\n                            height=\"50\"\n                            alt={job.company}\n                            src={job.company_logo}\n                        />\n                    </div>\n                    <Card.Text>\n                        <Button\n                            variant=\"info\"\n                            onClick={() => setOpen((prevOpen) => !prevOpen)} >\n                            {!open? \"View Details\":\"Hide Details\"}\n                        </Button>\n                    </Card.Text>\n                    <Collapse in={open}>\n                        <div className=\"mt-4\">\n                            <ReactMarkdown source={job.description} />\n                        </div>\n                    </Collapse>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n};\n\nexport default Job;\n","import React, { Fragment } from \"react\";\nimport { Pagination } from \"react-bootstrap\";\n\n\nconst JobsPagination = ({ page, setPage, hasNextPage }) => {\n    const goToPage=(amount)=>{\n        setPage(prevPage=>prevPage+amount);\n    }\n    return (\n        <Pagination>\n            {page !== 1 && <Pagination.Prev onClick={()=>goToPage(-1)}/>}\n            {page !== 1 && <Pagination.Item onClick={()=>setPage(1)}>1</Pagination.Item>}\n            {page > 2 && <Pagination.Ellipsis />}\n            {page > 2 && <Pagination.Item onClick={()=>goToPage(-1)}>{page - 1}</Pagination.Item>}\n            <Pagination.Item active>{page}</Pagination.Item>\n            {hasNextPage && (\n                <Fragment>\n                    <Pagination.Item onClick={()=>goToPage(1)} >{page + 1}</Pagination.Item>\n                    <Pagination.Next onClick={()=>goToPage(1)} />\n                </Fragment>\n            )}\n        </Pagination>\n    );\n};\n\nexport default JobsPagination;\n","import React from 'react';\nimport { Form, Col } from 'react-bootstrap';\n\nconst SearchForm = ({params,onParamChange}) => {\n    return (\n        <Form className=\"mb-4\">\n            <Form.Row className=\"align-items-end\">\n                <Col xs={12} sm={5}>\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control name=\"description\" type=\"text\" value={params.description} onChange={onParamChange} />\n                </Col>\n                <Col xs={12} sm={5} className=\"mt-sm-0 mt-2\">\n                    <Form.Label>Location</Form.Label>\n                    <Form.Control name=\"location\" type=\"text\" value={params.location} onChange={onParamChange} />\n                </Col>\n                 <Col xs=\"auto\" className=\"mb-2 mt-sm-0 mt-2\">\n                     <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full-time\" label=\"Only Full Time\" type=\"checkbox\" className=\"mb-2\" />\n                </Col>\n            </Form.Row>\n        </Form>\n    );\n};\n\nexport default SearchForm;","import React, { useState } from \"react\";\nimport useFetchJobs from \"./effects/useFetchJobs\";\nimport { Container } from \"react-bootstrap\";\nimport Job from \"./components/job.component\";\nimport JobsPagination from \"./components/job-pagination.component\";\nimport SearchForm from \"./components/search-form.component\";\n\nconst App = () => {\n\n    const [params,setParams]= useState({});\n    const [page,setPage]= useState(1);\n    const { jobs, isLoading, error,hasNextPage } = useFetchJobs(params,page);\n    \n    const handleParamChange=(e)=>{\n        var {name:param,value}= e.target;\n\n        if(e.target.type==='checkbox')\n            value=e.target.checked;\n        setPage(1); //since params changed search result starts from 1st page\n        setParams(prevParams=>({...prevParams,[param]:value}))\n    }\n\n    return (\n        <div>\n            <Container className=\"my-4\">\n                <h1 className=\"mb-4\">GitHub Jobs</h1>\n                <SearchForm params={params} onParamChange={handleParamChange} />\n                <JobsPagination hasNextPage={hasNextPage} page={page} setPage={setPage} />\n                {isLoading && <h1>Loading...</h1>}\n                {error && <h1>Error...Try Refreshing</h1>}\n                {jobs.map((job) => {\n                    return <Job key={job.id} job={job} />;\n                })}\n                <JobsPagination hasNextPage={hasNextPage} page={page} setPage={setPage} />\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}